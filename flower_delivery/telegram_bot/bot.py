import sys
import os
import django
from dotenv import load_dotenv
import telegram
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from django.conf import settings
from asgiref.sync import sync_to_async

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
project_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
load_dotenv(os.path.join(project_path, '.env'))

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É—Ç–∏ –∫ –ø—Ä–æ–µ–∫—Ç—É –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Django
if project_path not in sys.path:
    sys.path.append(project_path)

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'flower_delivery.settings')
django.setup()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telegram.Bot(token=settings.TELEGRAM_BOT_TOKEN)

# –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_ROLE = "user"
MANAGER_ROLE = "manager"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    chat_id = update.message.chat.id
    if contact:
        phone_number = contact.phone_number
        user_role = MANAGER_ROLE if phone_number.endswith("00") else USER_ROLE  # –ü—Ä–∏–º–µ—Ä —É—Å–ª–æ–≤–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        context.user_data["role"] = user_role
        await bot.send_message(chat_id=chat_id, text=f"–í–∞—à –Ω–æ–º–µ—Ä {phone_number} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\n–†–æ–ª—å: {user_role}.")
        await show_menu(update, context)


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
async def show_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_role = context.user_data.get("role", USER_ROLE)
    if user_role == MANAGER_ROLE:
        # –ú–µ–Ω—é –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        keyboard = [
            [KeyboardButton("üìà –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º")],
            [KeyboardButton("üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã")],
            [KeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–µ–Ω–µ–¥–∂–µ—Ä! üë©‚Äçüíº"
    else:
        # –ú–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = [
            [KeyboardButton("üõçÔ∏è –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã")],
            [KeyboardButton("üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ]
        welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await bot.send_message(chat_id=chat_id, text=welcome_text, reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    keyboard = [
        [KeyboardButton("üìû –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await bot.send_message(chat_id=chat_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                           reply_markup=reply_markup)


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def create_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await bot.send_message(chat_id=chat_id, text="üõí –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...")

    # –ü—Ä–∏–º–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞
    catalog = "1Ô∏è‚É£ –ë—É–∫–µ—Ç –†–æ–∑ - 1500 —Ä—É–±.\n2Ô∏è‚É£ –û—Ä—Ö–∏–¥–µ–∏ - 2500 —Ä—É–±.\n3Ô∏è‚É£ –õ–∏–ª–∏–∏ - 2000 —Ä—É–±."
    await bot.send_message(chat_id=chat_id, text=f"–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:\n\n{catalog}\n\n–ù–∞–ø–∏—à–∏—Ç–µ ID —Ü–≤–µ—Ç–∫–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤
async def check_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_role = context.user_data.get("role", USER_ROLE)
    chat_id = update.effective_chat.id

    if user_role == MANAGER_ROLE:
        await bot.send_message(chat_id=chat_id, text="üìã –í—Å–µ –∑–∞–∫–∞–∑—ã:\n1. –ë—É–∫–µ—Ç –†–æ–∑ (–û–∂–∏–¥–∞–µ—Ç)\n2. –õ–∏–ª–∏–∏ (–î–æ—Å—Ç–∞–≤–ª–µ–Ω)")
    else:
        await bot.send_message(chat_id=chat_id, text="üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n1. –ë—É–∫–µ—Ç –†–æ–∑ (–í –ø—É—Ç–∏)\n2. –û—Ä—Ö–∏–¥–µ–∏ (–û–∂–∏–¥–∞–µ—Ç)")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º
async def send_order_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await bot.send_message(chat_id=chat_id, text="üìä –ú–∏–Ω—É—Ç–æ—á–∫—É, –≥–æ—Ç–æ–≤–ª—é –æ—Ç—á–µ—Ç...")
    report_message = "üßæ –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º:\n\n–û–±—â–∏–π –¥–æ—Ö–æ–¥: 10000 —Ä—É–±.\n–ó–∞–∫–∞–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: 5\n–í –ø—Ä–æ—Ü–µ—Å—Å–µ: 3"
    await bot.send_message(chat_id=chat_id, text=report_message)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    bot_token = settings.TELEGRAM_BOT_TOKEN
    if not bot_token:
        print("–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞")
        return

    application = ApplicationBuilder().token(bot_token).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.CONTACT, contact_handler))
    application.add_handler(MessageHandler(filters.Regex("^(üõçÔ∏è –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑)$"), create_order))
    application.add_handler(MessageHandler(filters.Regex("^(üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã|üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã)$"), check_orders))
    application.add_handler(MessageHandler(filters.Regex("^(üìà –û—Ç—á–µ—Ç –ø–æ –∑–∞–∫–∞–∑–∞–º)$"), send_order_report))
    application.add_handler(MessageHandler(filters.Regex("^(üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$"), show_menu))

    application.run_polling()


if __name__ == '__main__':
    main()
